name: Deploy Infrastructure with Terraform

on:
  push:
    branches: [ "dev" ]
    paths: 
      - 'terraform/**'
  pull_request:
    branches: [ "dev" ]
    paths:
      - 'terraform/**'
  workflow_dispatch: # Allow manual trigger

env:
  TF_VERSION: '1.7.0'
  TERRAFORM_WORKING_DIR: './terraform'

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}

    steps:
    # 1️⃣ Checkout repository
    - name: Checkout
      uses: actions/checkout@v4

    # 2️⃣ Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # 3️⃣ Login to Azure via OIDC
    - name: Login to Azure via OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # 4️⃣ Create terraform.tfvars from secrets
    - name: Create terraform.tfvars
      run: |
        cat > terraform.tfvars << EOF
        # Basic Configuration
        resource_group_name = "aztek-app-rg"
        location           = "North Europe"
        environment        = "prod"
        project_name       = "aztek"
        
        # Database Credentials
        db_admin_username = "${{ secrets.DB_ADMIN_USERNAME }}"
        db_admin_password = "${{ secrets.DB_ADMIN_PASSWORD }}"
        
        # Application Secrets
        flask_secret_key     = "${{ secrets.FLASK_SECRET_KEY }}"
        openweather_api_key  = "${{ secrets.OPENWEATHER_API_KEY }}"
        
        # Infrastructure Settings
        app_service_sku     = "B1"
        postgres_sku_name   = "B_Standard_B1ms"
        postgres_storage_mb = 32768
        enable_front_door   = true
        EOF

    # 5️⃣ Terraform Init
    - name: Terraform Init
      run: terraform init

    # 6️⃣ Terraform Format Check
    - name: Terraform Format
      run: terraform fmt -check

    # 7️⃣ Terraform Plan
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -input=false -out=tfplan
        terraform show -no-color tfplan > plan.txt
      continue-on-error: true

    # 8️⃣ Comment PR with plan (for PRs only)
    - name: Comment PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('terraform/plan.txt', 'utf8');
          const maxGitHubBodyCharacters = 65536;
          
          function chunkSubstr(str, size) {
            const numChunks = Math.ceil(str.length / size)
            const chunks = new Array(numChunks)
            for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
              chunks[i] = str.substr(o, size)
            }
            return chunks
          }
          
          const planChunks = chunkSubstr(plan, maxGitHubBodyCharacters);
          
          for (let i = 0; i < planChunks.length; i++) {
            const output = `### Terraform Plan Output (Part ${i + 1}/${planChunks.length})
            \`\`\`terraform
            ${planChunks[i]}
            \`\`\``;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
          }

    # 9️⃣ Terraform Apply (only on dev branch)
    - name: Terraform Apply
      if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false tfplan
